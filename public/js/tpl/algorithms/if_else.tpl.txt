function TPLAlgorithm() {
    let theseAreTheIfElseBlocks;
    let theseAreTheParameters:arguments;
    let addTheParametersToTheVariableBank:variableBank;
    let thisIsTheNextLineThatWillExecute:codeLine;
    let nextCodeBlock;
    let thisIsTheNextIfElseBranchThatWillExecute;
    let thisIsTheNextStatementThatWillExecute;
    let thisLineUpdatesAVariableValue;
    let whatDoesThisPrintlnFunctionPrint;
    let crossOutTheBranchLines:crossedOutLines;

    let AST;
    [no_step]
    AST = state.AST;

	[prompt]
	"First, look at the structure of the code in the problem.";
	theseAreTheIfElseBlocks = helper.getIfElseBlocks(AST, state);

	[prompt]
	"Next, look at the method call.";
	theseAreTheParameters = helper.getParameters(AST, state);
	addTheParametersToTheVariableBank = helper.addToTheVariableBank(theseAreTheParameters, AST, state);

	[prompt]
	"Now walk through the code line-by-line, keeping track of variable values in the variable bank.";
	[no_step]
	while (helper.areThereMoreCodeBlocks(AST,state)) {
		thisIsTheNextLineThatWillExecute = helper.getNextCodeBlock(AST, state);
		[no_step]
		if (helper.thisIsAVariableDeclarationStatement(AST, state)) {
		    let thisLineDeclaresANewVariable:assignment;
			thisLineDeclaresANewVariable = helper.getDeclaredVariable(AST, state);
			let addTheNewVariableToTheVariableBank:variableBank;
			addTheNewVariableToTheVariableBank = helper.addToTheVariableBank(thisLineDeclaresANewVariable, AST, state);
		}
		else [no_step] if (helper.thisIsAnIfElseStatement(AST, state)) {
			[prompt]
			"We're at the beginning of a new if/else block. Let's find the first branch that evaluates to true.";
			[no_step]
            thisIsTheNextIfElseBranchThatWillExecute = helper.getNextIfElseStatement(AST, state);
            if (helper.doesThisConditionalEvaluateToTrue(thisIsTheNextIfElseBranchThatWillExecute, state)) {
                [no_step]
                do {
                    thisIsTheNextLineThatWillExecute = helper.getNextStatement(thisIsTheNextIfElseBranchThatWillExecute["then_branch"], AST, state);
                    thisLineUpdatesAVariableValue = helper.executeUpdateVariableStatement(thisIsTheNextIfElseBranchThatWillExecute["then_branch"], AST, state);
                    let updateTheVariableInTheVariableBank:variableBank;
                    updateTheVariableInTheVariableBank = helper.addToTheVariableBank(thisLineUpdatesAVariableValue, AST, state);
                }
                while (helper.isThereAnotherStatementToExecute(thisIsTheNextIfElseBranchThatWillExecute["then_branch"], AST, state));
            }
            else {
                [prompt]
                "Since the conditional evaluates to false, we won't go into this branch.";
                crossOutTheBranchLines = helper.crossOut(thisIsTheNextIfElseBranchThatWillExecute["then_branch"], crossOutTheBranchLines, AST, state);
                [no_step]
                while (helper.isThereAnotherIfElseStatement(AST, state)) {
                    [no_step]
                    thisIsTheNextIfElseBranchThatWillExecute = helper.getNextIfElseStatement(AST, state);
                    [no_step]
                    if (helper.doesThisStatementHaveAConditional(thisIsTheNextIfElseBranchThatWillExecute)) {
                        thisIsTheNextLineThatWillExecute = helper.getElseIfStatementLineNum(thisIsTheNextIfElseBranchThatWillExecute);
                        if (helper.doesThisConditionalEvaluateToTrue(thisIsTheNextIfElseBranchThatWillExecute, state)) {
                            [prompt]
                            "Since the conditional evaluates to true, we won't go into any of the other branches.";
                            crossOutTheBranchLines = helper.crossOutOtherBranches(thisIsTheNextIfElseBranchThatWillExecute, crossOutTheBranchLines, AST, state);
                            [no_step]
                            do {
                                thisIsTheNextLineThatWillExecute = helper.getNextStatement(thisIsTheNextIfElseBranchThatWillExecute["then_branch"], AST, state);
                                thisLineUpdatesAVariableValue = helper.executeUpdateVariableStatement(thisIsTheNextIfElseBranchThatWillExecute["then_branch"], AST, state);
                                let updateTheVariableInTheVariableBank:variableBank;
                                updateTheVariableInTheVariableBank = helper.addToTheVariableBank(thisLineUpdatesAVariableValue, AST, state);
                            }
                            while (helper.isThereAnotherStatementToExecute(thisIsTheNextIfElseBranchThatWillExecute["then_branch"], AST, state));

                            break;
                        }
                        else {
                            sinceTheConditionalEvaluatedToFalseWeWontGoIntoThisBranch = helper.crossOut(thisIsTheNextIfElseBranchThatWillExecute["then_branch"], sinceTheConditionalEvaluatedToFalseWeWontGoIntoThisBranch, AST, state);
                        }
                    }
                    else {
                        thisIsTheNextLineThatWillExecute = helper.getElseStatementLineNum(thisIsTheNextIfElseBranchThatWillExecute);
                        [prompt]
                        "We go into the else branch";
                        [no_step]
                        do {
                            thisIsTheNextLineThatWillExecute = helper.getNextStatement(thisIsTheNextIfElseBranchThatWillExecute, AST, state);
                            thisLineUpdatesAVariableValue = helper.executeUpdateVariableStatement(thisIsTheNextIfElseBranchThatWillExecute, AST, state);
                            let updateTheVariableInTheVariableBank:variableBank;
                            updateTheVariableInTheVariableBank = helper.addToTheVariableBank(thisLineUpdatesAVariableValue, AST, state);
                        }
                        while (helper.isThereAnotherStatementToExecute(thisIsTheNextIfElseBranchThatWillExecute, AST, state));
                        break;
                    }
                }
            }
		}
		else [no_step] if (helper.thisIsAPrintlnStatement(AST, state)) {
			whatDoesThisPrintlnFunctionPrint = helper.getPrintlnOutput(AST, state);
			[prompt]
			"Enter the solution in the solution box.";
		}

	}
}