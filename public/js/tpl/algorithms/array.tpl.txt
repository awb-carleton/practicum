function TPLAlgorithm() {
    // types:
    // AstNode: a java ast node
    // Line: a java ast node, but we want to highlight the line rather than the node
    // VariableBank: the bank of all local variables
    // Variable: a value that will be added to the variable bank, of form {name:string, type:string, value:*}.

    // FIXME get this out of here once simulator can pass input parameters
    let ast;
    [no_step]
    ast = state.ast;

    [no_step]
    state.vars = helper.copy_args(state.args);

    let variables: VariableBank;
    [no_step]
    variables = helper.create_new_variable_bank();

    [no_step]
    {
        [prompt]
        "First, look at the method call.";

        let this_is_the_parameter: Parameter;
        this_is_the_parameter = helper.get_parameter(state.args);

        let add_the_array_to_the_variable_bank: Variable;
        [interactive("add_variable")]
        add_the_array_to_the_variable_bank = helper.add_this_to_the_variable_bank(variables, this_is_the_parameter);
    }

    // FIXME get this out of here once simulator handles refs correctly
    let loop;
    [no_step]
    loop = helper.get_loop(ast);

    [no_step]
    {
        [prompt]
        "Next, look at the loop header.";

        let this_is_the_loop_initializer: AstNode;
        this_is_the_loop_initializer = loop.initializer;

        let add_the_loop_variable_to_the_variable_bank: Variable;
        [interactive("add_variable")]
        add_the_loop_variable_to_the_variable_bank = helper.add_this_to_the_variable_bank(variables, helper.get_loop_init_variable(variables, this_is_the_loop_initializer));
    }

    let this_is_the_loop_condition: AstNode;
    this_is_the_loop_condition = loop.condition;

    let this_is_the_loop_increment: AstNode;
    this_is_the_loop_increment = loop.increment;

    [interactive("conditional")]
    while (helper.does_the_loop_condition_hold(variables, this_is_the_loop_condition)) {
        let this_is_the_next_line_to_execute: Line;
        [no_step]
        this_is_the_next_line_to_execute = null;

        [no_step]
        do {
            this_is_the_next_line_to_execute = helper.get_the_next_loop_body_line_to_execute(loop, this_is_the_next_line_to_execute);

            let this_is_the_expression_result: Variable;

            [no_step]
            {
                // FIXME assume it's an assignment statement
                // copy expression to workspace
                let this_is_the_expression: ScratchList;
                this_is_the_expression = helper.create_scratch(this_is_the_next_line_to_execute.expression.args[1]);

                // for each array lookup in the expression, do the array lookup
                for (let this_is_the_array_lookup: ScratchAstNode of helper.all_array_lookups_in_the_expression(this_is_the_expression)) {
                    let this_is_the_array: Variable;
                    // can do this on the original scratch expression because it will never change and doesn't affect highlighting
                    this_is_the_array = helper.evaluate_this_expression2(variables, this_is_the_array_lookup.object);

                    // evaluate this node of the ast down to a literal
                    // can also do this on the original expression because the UI will know to highlight the last line of scratch
                    // TODO nell: do we want to highlight this node or just skip this?
                    let this_is_the_index: ScratchAstNode;
                    this_is_the_index = this_is_the_array_lookup.index;

                    // TODO intended interaction: user has to click on the array cell corresponding to the correct index.
                    // this will be a variable {type:string, value:int} with an additional field array:Variable that points to the array being indexed.
                    let click_on_the_array_cell_at_this_index: ArrayIndex;
                    [interactive("array_access")]
                    click_on_the_array_cell_at_this_index = helper.evaluate_this_expression(variables, this_is_the_array, this_is_the_index);

                    let do_the_array_lookup: ScratchAstNode;
                    [interactive("array_get")]
                    do_the_array_lookup = helper.do_the_array_lookup(this_is_the_expression, this_is_the_array, click_on_the_array_cell_at_this_index, this_is_the_array_lookup);
                }

                // TODO nell: these interactive names are all made up without too much thought, probably some should be renamed and/or merged.
                // TODO also probably the types are wrong.
                // evalute the rest of the expression
                [interactive("evaluate_expression")]
                this_is_the_expression_result = helper.evaluate_this_expression_and_add_to_scratch(variables, this_is_the_expression);
            }

            // for the array being assigned to, lookup the box
            let this_is_the_assigner: AstNode;
            this_is_the_assigner = this_is_the_next_line_to_execute.expression.args[0];

            let this_is_the_array: Variable;
            this_is_the_array = helper.evaluate_this_expression2(variables, this_is_the_assigner.object);

            let this_is_the_index: AstNode;
            this_is_the_index = this_is_the_assigner.index;

            let click_on_the_array_cell_at_this_index: ArrayIndex;
            [interactive("array_access")]
            click_on_the_array_cell_at_this_index = helper.evaluate_this_expression(variables, this_is_the_array, this_is_the_index);

            // assign the new value to the box
            let assign_the_new_value_to_the_array_element: ArraySet;
            [interactive("array_set")]
            assign_the_new_value_to_the_array_element = helper.assign_the_new_value_to_the_array_element(this_is_the_array, click_on_the_array_cell_at_this_index, this_is_the_expression_result);

        } while (helper.is_there_another_line_to_execute(ast, this_is_the_next_line_to_execute));

        let execute_the_loop_increment_and_update_the_variable: Variable;
        [interactive("update_variable")]
        execute_the_loop_increment_and_update_the_variable = helper.execute_the_loop_increment(variables, this_is_the_loop_increment);
    }

    // TODO maybe just put the answer in a variable
    [no_step]
    state.answer = helper.calculate_answer(variables);

    [prompt]
    "Write the answer in the box.";
}
