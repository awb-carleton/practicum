function TPLAlgorithm() {
    // types:
    // AstNode: a java ast node
    // Line: a java ast node, but we want to highlight the line rather than the node
    // VariableBank: the bank of all local variables
    // Variable: a value that will be added to the variable bank, of form {name:string, type:string, value:*}.

    // FIXME get this out of here once simulator can pass input parameters
    let ast;
    [no_step]
    ast = state.ast;

    [no_step]
    state.vars = helper.copy_args(state.args);

    let variables: VariableBank;
    [no_step]
    variables = helper.create_new_variable_bank();

    [prompt]
    "Welcome to for loop practice.";

    [no_step]
    {
        [prompt]
        "First, look at the method call.";

        let these_are_the_function_parameters: Parameter;
        these_are_the_function_parameters = helper.get_array_parameter(state.args);

        [no_step]
        if (state.vars.length > 0) {
            let add_the_parameters_to_the_variable_bank: Variable;
            [interactive("add_variable")]
            add_the_parameters_to_the_variable_bank = helper.add_other_parameters_to_the_variable_bank(variables, state.vars);
        }

        [prompt]
        "Now let’s walk through the code line-by-line while keeping track of variables.";
    }

    [no_step]
    while(helper.check_for_loop(ast)) {

        let this_is_the_next_line_that_will_execute: Line;
        [interactive("next_line")] this_is_the_next_line_that_will_execute = helper.get_next_line(ast.body, this_is_the_next_line_that_will_execute);

        [no_step]
        let it_defines_a_new_instance_variable_which_we_will_add_to_the_variable_bank: Variable;
        [interactive("add_variable")]
        it_defines_a_new_instance_variable_which_we_will_add_to_the_variable_bank = helper.get_instance_variable(variables, ast);
    }

    let this_is_the_next_line_that_will_execute: Line;
    [interactive("next_line")] this_is_the_next_line_that_will_execute = helper.get_loop(ast);

    // FIXME get this out of here once simulator handles refs correctly
    let loop;
    [no_step]
    loop = helper.get_loop(ast);
    [prompt]
    "We're at the beginning of a new for-loop block. Look at the loop header.";

    [no_step]
    let now_python_turns_our_sequence_into_an_array: Variable;

    [no_step]
    {
        let this_is_the_loop_initialization: AstNode;
        let this_is_the_loop_iterable: AstNode;
        let this_is_the_loop_variable: AstNode;
        [no_step]
        this_is_the_loop_iterable = loop.iterable;
        [no_step]
        this_is_the_loop_variable = loop.variable;

        [no_step]
        if (helper.is_loop_arr_type(loop)) {
            [prompt]
            "i will be iterating through an array during our for loop, starting with the first element at index 0 and moving to the next element each time the loop starts again.";

            [prompt]
            "We need to set the initial value of i to the starting element of the array. ";
        } else {
            [prompt]
            "When range is called with some integer parameters in Python, it makes a sequence of numbers to match the range call.";

            [prompt]
            "You can pass 1 to 3 numbers to range. If there’s only one number then the sequence goes from 0 to one less than that number because Python starts indexing at 0.";

            [prompt]
            "Two numbers in the range call sets a specific start and end for the sequence, and a third number is the step which tells Python how quickly to move through the sequence. Normally the step is 1.";

            [prompt]
            "First let’s set our loop variable i to the first element of the array.";
        }

        [no_step]
        if (helper.is_loop_arr_type(loop)) {
            let add_the_starting_value_for_i_to_the_variable_bank: Variable;
            [interactive("add_variable")]
            add_the_starting_value_for_i_to_the_variable_bank = helper.add_this_to_the_variable_bank(variables, helper.get_loop_init_variable(variables, this_is_the_loop_variable, this_is_the_loop_iterable));

            [prompt]
            "The for loop will end when i has moved through each element in the array. Now let’s move on into the for loop.";

            now_python_turns_our_sequence_into_an_array = helper.get_iterable_array();

            let this_is_the_first_index_for_the_loop_array: ArrayElement;
            [interactive("array_element_get")]
            this_is_the_first_index_for_the_loop_array = helper.loop_array_index(variables, now_python_turns_our_sequence_into_an_array);
        } else {
            let add_the_starting_value_for_i_to_the_variable_bank: Variable;
            [interactive("add_variable")]
            add_the_starting_value_for_i_to_the_variable_bank = helper.add_this_to_the_variable_bank(variables, helper.get_loop_init_variable(variables, this_is_the_loop_variable, this_is_the_loop_iterable));

            now_python_turns_our_sequence_into_an_array = helper.get_iterable_array();

            let add_the_array_to_the_variable_bank: Variable;
            [interactive("add_variable")]
            add_the_array_to_the_variable_bank = helper.add_this_to_the_variable_bank(variables, now_python_turns_our_sequence_into_an_array);

            let this_is_the_first_index_for_the_loop_array: ArrayElement;
            [interactive("array_element_get")]
            this_is_the_first_index_for_the_loop_array = helper.loop_array_index(variables, now_python_turns_our_sequence_into_an_array);

            [prompt]
            "Every time the for loop starts again, i moves to the next index of the array and takes on the next value.";

            [prompt]
            "The for loop will end when i has moved through each element in the array. Now let’s move on into the for loop.";
        }
    }

    [no_step]
    while (helper.was_that_the_last_element_in_the_array(variables))  {

        [no_step]
        this_is_the_next_line_that_will_execute = null;
        let condition_outcome;
        [no_step]
        condition_outcome = null;
        let parent;
        [no_step]
        parent = loop;

        [no_step]
        do {
            [interactive("next_line")] this_is_the_next_line_that_will_execute = helper.get_the_next_loop_body_line_to_execute(parent, this_is_the_next_line_that_will_execute, condition_outcome);

            [no_step]
            if (helper.is_if(this_is_the_next_line_that_will_execute)) {
                let this_is_the_conditional_of_an_if_statement: AstNode;
                this_is_the_conditional_of_an_if_statement = this_is_the_next_line_that_will_execute.condition;

                [interactive("conditional")]
                if (helper.does_this_conditional_evaluate_to_true(variables, this_is_the_conditional_of_an_if_statement)) {
                    [prompt]
                    "Since it’s true we move on to the lines inside the if statement.";
                    [no_step]
                    parent = this_is_the_next_line_that_will_execute;
                    [no_step]
                    this_is_the_next_line_that_will_execute = null;
                    [no_step]
                    condition_outcome = true;
                } else {
                    [prompt]
                    "Since it’s not true we will be ignoring all of the lines in the if statement.";
                    [no_step]
                    if (helper.has_else(this_is_the_next_line_that_will_execute)) {
                        [no_step]
                        parent = this_is_the_next_line_that_will_execute;
                        [no_step]
                        this_is_the_next_line_that_will_execute = null;
                        [no_step]
                        condition_outcome = false;
                    }
                }
            } else {
                [prompt]
                "This line updates the value of a variable.";

                let update_the_variable_in_the_variable_bank: Variable;
                [interactive("update_variable")]
                update_the_variable_in_the_variable_bank = helper.assign_the_new_value_to_the_variable(variables, this_is_the_next_line_that_will_execute);
            }

        } while (helper.is_there_another_line_to_execute(parent, this_is_the_next_line_that_will_execute, condition_outcome));

        [prompt]
        "We have reached the end of the for loop.";

        [no_step]
        this_is_the_next_line_that_will_execute = helper.get_loop(ast);

        [no_step]
        {
            let now_we_go_back_to_the_start_and_update_the_loop_variable: AstNode;
            now_we_go_back_to_the_start_and_update_the_loop_variable = loop.increment;

            let update_the_value_of_the_loop_variable_in_the_variable_bank: Variable;
            [interactive("update_variable")]
            update_the_value_of_the_loop_variable_in_the_variable_bank = helper.execute_the_loop_increment(variables, loop.variable);

            let this_is_the_next_index_for_the_loop_array: ArrayElement;
            [interactive("array_element_get")]
            this_is_the_next_index_for_the_loop_array = helper.loop_array_index(variables, now_python_turns_our_sequence_into_an_array);
        }
    }

    [prompt]
    "Write the final values of the variables to be returned in the solution box.";

}
