Compiler-like Order
Handles multiplication, division, mod, 
addition, subtraction, and parenthesis.
Assumes student knows operations (e.g. they know how to mod)

// Don't know type of expression, for now assume String
String evaluate(String exp) {  

	/* exp = expression
	 * will parse operators from left to right
	 * and evaluate multiplication/division/modulo
	 * after evaluting, placed evaluated values
	 * back into expression
	 */
	while (not at the end of the expression) {
		prev = value before operator
		oper = operator
		next = value after operator
		if (oper == multiplication || oper == division || oper == mod) {
			evaluated = prev operator next (after being removed from expression)
			if (prev starts with "(" and ends with ")" ) {
				evaluate(prev);  // recurse and evaluate expression in parenthesis
			} 
			if (next starts with "(" and ends with ")" ) {
				evaluate(next);  // recurse and evaluate expression in parenthesis
			} 
			if (prev || next are of type double) {
				doubleHint();
			}
			if (oper == multiplication) {
				evaluated = prev * next;
			} else if (oper == division) {
				if (prev && next are ints) {
					divisionHint();
				}
				evaluated = prev / next;
			} else if(oper = mod) {
				evaluated = prev % next;
			}
			add evaluated into expression  
		}
		continue parsing expression
	}

	/* will parse operators from left to right
	 * and evaluate addition/subtraction
	 * after evaluting, placed evaluated values
	 * back into expression
	 */
	while (there are no more operators) {
		prev = value before operator
		oper = operator
		next = value after operator
		prev operator next should be removed from expression
		if (prev starts with "(" and ends with ")" ) {
			evaluate(prev);  // recurse and evaluate expression in parenthesis
		} 
		if (next starts with "(" and ends with ")" ) {
			evaluate(next);  // recurse and evaluate expression in parenthesis
		}
		if (prev || next are of type double) {
				doubleHint();
		}
		if (oper == addition) {
			if (prev || next is a String) {
				stringHint();
			}
			evaluated = prev + next;
		} else if (oper == subtraction) {
			if (prev || next are of type double) {
				doubleHint();
			} 
			evaluated = prev - next;
		} 
		add evaluated into expression
		continue parsing
	}

	return exp;
}

// Messages

void doubleHint() {
	message about how ints are treated as doubles
	and result needs to be a double
}

void divisionHint() {
	message about doing integer division
}

void stringHint() {
	message about String concatanation
}

