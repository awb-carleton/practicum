function TPLAlgorithm() {
    // types:
    // AstNode: a java ast node
    // Line: a java ast node, but we want to highlight the line rather than the node
    // VariableBank: the bank of all local variables
    // Variable: a value that will be added to the variable bank, of form {name:string, type:string, value:*}.

    // FIXME get this out of here once simulator can pass input parameters
    let ast;
    [no_step]
    ast = state.ast;

    [no_step]
    state.vars = helper.copy_args(state.args);

    let variables: VariableBank;
    [no_step]
    variables = helper.create_new_variable_bank();

    [prompt]
    "Welcome to for loop practice";

    [no_step]
    {
        [prompt]
        "First, look at the method call.";

        let these_are_the_function_parameters: Parameter;
        these_are_the_function_parameters = helper.get_array_parameter(state.args);

        [no_step]
        if (state.vars.length > 1) {
            let add_the_parameters_to_the_variable_bank: Variable;
            [interactive("add_variable")]
            add_the_parameters_to_the_variable_bank = helper.add_other_parameters_to_the_variable_bank(variables, state.vars);
        }

        [prompt]
        "Now letâ€™s walk through the code line-by-line while keeping track of variables.";
    }

    [no_step]
    {
        [no_step]
        let first_line: Line;
        [interactive("next_line")] first_line = helper.get_first_line(ast);
    }

    let this_is_the_first_instance_variable: Variable;
    [interactive("add_variable")]
    this_is_the_first_instance_variable = helper.get_instance_variable(variables, ast);

    while(helper.check_for_loop(ast)) {
        let this_is_the_next_instance_variable: Variable;
        [interactive("add_variable")]
        this_is_the_next_instance_variable = helper.get_instance_variable(variables, ast);

        let next_line: Line;
        [interactive("next_line")] next_line = helper.get_next_line(ast.body, next_line);
    }

    [prompt]
    "Now walk through the code line-by-line, keeping track of variable values in the variable bank.";

    let this_is_the_next_line_that_will_execute: Line;
    [interactive("next_line")] this_is_the_next_line_that_will_execute = helper.get_loop(ast);

    // FIXME get this out of here once simulator handles refs correctly
    let loop;
    [no_step]
    loop = helper.get_loop(ast);
    [prompt]
    "We're at the beginning of a new for-loop block. Look at the loop header.";

    [no_step]
    {
        let this_is_the_loop_initialization: AstNode;
        let this_is_the_loop_iterable: AstNode;
        let this_is_the_loop_variable: AstNode;
        [no_step]
        this_is_the_loop_iterable = loop.iterable;
        [no_step]
        this_is_the_loop_variable = loop.variable;
        [prompt]
        "This is the loop initialization. It defines a loop variable.";


        let add_this_loop_variable_to_the_variable_bank: Variable;
        [interactive("add_variable")]
        add_this_loop_variable_to_the_variable_bank = helper.add_this_to_the_variable_bank(variables, helper.get_loop_init_variable(variables, this_is_the_loop_variable, this_is_the_loop_iterable));

    }

    // let this_is_the_loop_condition: AstNode;
    // this_is_the_loop_condition = loop.condition;

    // [prompt]
    // "We will only enter the loop if this conditional evaluates to true.";

    let this_is_the_loop_increment: AstNode;
    this_is_the_loop_increment = loop.increment;

    [prompt]
    "Our loop will iterate at the rate of the increment value, which is defined by step";

    [prompt]
    "Now we will look at the code in the for loop.";

    [interactive("conditional")]
    while (helper.is_the_loop_still_iterating(variables))  {

        [no_step]
        this_is_the_next_line_that_will_execute = null;
        let condition_outcome;
        [no_step]
        condition_outcome = null;
        let parent;
        [no_step]
        parent = loop;

        // FIXME hack to remove loop condition highlighting. maybe the variable context idea doesn't actually work?
        // [no_step]
        // this_is_the_loop_condition  = null;

        [interactive("next_line")] this_is_the_next_line_that_will_execute = helper.get_the_next_loop_body_line_to_execute(parent, this_is_the_next_line_that_will_execute, condition_outcome);

        [prompt]
        "This line updates the value of a variable.";

        let update_the_variable_in_the_variable_bank: Variable;
        [interactive("update_variable")]
        update_the_variable_in_the_variable_bank = helper.assign_the_new_value_to_the_variable(variables, this_is_the_next_line_that_will_execute);

        [no_step]
        this_is_the_next_line_that_will_execute = helper.get_loop_end(loop);
        [prompt]
        "We reached the end of the for loop body.";

        [no_step]
        this_is_the_next_line_that_will_execute = helper.get_loop(ast);
        [prompt]
        "Loop back up to the declaration and execute the loop update.";

        [no_step]
        {
            let this_is_the_loop_update: AstNode;
            this_is_the_loop_update = loop.increment;

            let update_the_value_of_the_loop_variable_in_the_variable_bank: Variable;
            [interactive("update_variable")]
            update_the_value_of_the_loop_variable_in_the_variable_bank = helper.execute_the_loop_increment(variables, loop.variable);
        }

        // [prompt]
        // "Now let's check the loop condition again.";
        // this_is_the_loop_condition = loop.condition;

    }

}
